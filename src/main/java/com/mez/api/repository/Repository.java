package com.mez.api.repository;

import com.mez.api.tools.DAO;
import com.mez.api.tools.ResponseCodes;
import com.mez.api.tools.annotations.AutoGenerated;
import com.mez.api.tools.annotations.PrimaryKey;
import java.lang.reflect.Field;
import java.lang.reflect.ParameterizedType;
import java.sql.SQLException;
import java.util.List;

/**
 * This abstract class created for CRUD objects of any type.
 * method save -- save one entity of any type to the database;
 * method saveAll -- save list of entities to the database;
 * method getAll -- receive all entities from table;
 * method getById -- receive one entity from table;
 * method delete -- delete entity from table by id;
 */
public abstract class Repository<T> {

  protected final DAO dao;
  protected final String tableName;
  private final Class<T> type;
  private final boolean autoGeneratedFieldsPresent;
  private boolean primaryKeyPresent;
  private String primaryKey;

  public Repository(DAO dao, String tableName) {
    this.dao = dao;
    this.tableName = tableName;
    this.type = (Class<T>) ((ParameterizedType) getClass()
        .getGenericSuperclass()).getActualTypeArguments()[0];
    autoGeneratedFieldsPresent = isGeneratedFieldsPresent();
    definePrimaryKey();
    try {
      this.dao.openConnection();
    } catch (SQLException e) {
      e.printStackTrace();
    }
  }

  private boolean isGeneratedFieldsPresent() {
    for (Field field: type.getDeclaredFields()) {
      if (field.isAnnotationPresent(AutoGenerated.class)) {
        return true;
      }
    }
    return false;
  }

  private void definePrimaryKey() {
    primaryKey = "id";
    for (Field field: type.getDeclaredFields()) {
      if (field.isAnnotationPresent(PrimaryKey.class)) {
        primaryKey = field.getName();
        primaryKeyPresent = true;
        break;
      }
    }
  }

  public int save(T object) throws SQLException {
    String query = "INSERT into " + tableName + " (";
    Field[] fields = object.getClass().getDeclaredFields();
    for (Field field: fields) {
      if (!field.isAnnotationPresent(AutoGenerated.class)) {
        query += field.getName() + ",";
      }
    }
    query = query.substring(0, query.length() - 1) + ") values (";
    for (Field field: fields) {
      try {
        if (!field.isAnnotationPresent(AutoGenerated.class)) {
          field.setAccessible(true);
          query += "'" + field.get(object) + "',";
          field.setAccessible(false);
        }
      } catch (IllegalAccessException e) {
        e.printStackTrace();
      }
    }
    query = query.substring(0, query.length() - 1) + ")";
    dao.executeUpdate(query);
    return autoGeneratedFieldsPresent && primaryKeyPresent ?
        (int) dao.countQuery("SELECT max(" + primaryKey + ") FROM " + tableName) :
        ResponseCodes.SUCCESS;
  }

  public void saveAll(List<T> objects) throws SQLException {
    if (objects.size() == 0) return;
    String query = "INSERT into " + tableName + " (";
    Field[] fields = objects.get(0).getClass().getDeclaredFields();
    for (Field field: fields) {
      if (!field.isAnnotationPresent(AutoGenerated.class)) {
        query += field.getName() + ",";
      }
    }
    query = query.substring(0, query.length() - 1) + ") values ";
    for (T object : objects) {
      query += "(";
      for (Field field: fields) {
        try {
          if (!field.isAnnotationPresent(AutoGenerated.class)) {
            field.setAccessible(true);
            query += "'" + field.get(object) + "',";
            field.setAccessible(false);
          }
        } catch (IllegalAccessException e) {
          e.printStackTrace();
        }
      }
      query = query.substring(0, query.length() - 1) + "),";
    }
    query = query.substring(0, query.length() - 1);
    dao.executeUpdate(query);
  }

  public List<T> getAll() {
    return dao.executeListQuery("SELECT * FROM " + tableName, type);
  }

  public T getById(String id) {
    return dao.executeQuery(
        "SELECT * FROM " + tableName + " WHERE " + primaryKey + " = \"" + id + "\"", type);
  }

  public void update(T object) throws SQLException {
    String query = "UPDATE " + tableName + " SET ";
    Field[] fields = object.getClass().getDeclaredFields();
    String id = "";
    for (Field field: fields) {
      try {
        field.setAccessible(true);
        if (field.isAnnotationPresent(PrimaryKey.class)) {
          id = field.get(object).toString();
        } else {
          query += field.getName() + " = '" + field.get(object) + "',";
        }
        field.setAccessible(false);
      } catch (IllegalAccessException e) {
        System.out.println(e.getMessage());
      }
    }
    query = query.substring(0, query.length() - 1) + " WHERE " + primaryKey + " = \"" + id + "\"";
    dao.executeUpdate(query);
  }

  public byte delete(String id) {
    try {
      dao.executeUpdate("DELETE FROM " + tableName + " WHERE " + primaryKey + " = \"" + id + "\"");
      return ResponseCodes.SUCCESS;
    } catch (SQLException e) {
      return ResponseCodes.DATABASE_ERROR;
    }
  }

}
